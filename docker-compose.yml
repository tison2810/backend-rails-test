version: '3.9'
services:
  db:
    image: postgres:alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - 5433:5432
    volumes:
      - postgres-db:/var/lib/postgresql/data
    # networks:
    #   - backend-network

  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        RUBY_VERSION: 3.4.4
    env_file:
        - ./gscores/.env
    environment:
      RAILS_ENV: production
      DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
    ports:
      - 8080:8080
    depends_on:
      - db
    volumes:
      - .:/rails
    command: ["./bin/thrust", "./bin/rails", "server", "-b", "0.0.0.0"]
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - frontend-build:/app/dist 

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"  # Má»Ÿ port 443 cho HTTPS
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - backend
    networks:
      - backend-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    networks:
      - backend-network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
volumes:
  postgres-db:      